name: ci-cd-pipeline

on:
  push:
    branches: [master]
  pull_request:

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      backend_changed: ${{ steps.filter.outputs.backend }}
      bot_changes: ${{ steps.filter.outputs.bot }}
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Detect changes
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            backend:
              - 'Backend/**'
              - 'Shared/**'
            bot:
              - 'Bot/**'
              - 'Shared/**'
  
  build-and-test:
    runs-on: ubuntu-latest
    needs: check-changes
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
      
      - name: Restore
        run: dotnet restore Reglamentator.sln
      
      - name: Build
        run: dotnet build Reglamentator.sln --configuration Release --no-restore
      
      - name: Test
        run: dotnet test Tests/Reglamentator.Test.Bot/Reglamentator.Test.Bot.csproj --verbosity normal
      
      - name: Publish Bot
        if: needs.check-changes.outputs.bot_changes == 'true'
        run: dotnet publish Bot/Reglamentator.Bot/Reglamentator.Bot.csproj -c Release -o ./bot
      
      - name: Publish Backend
        if: needs.check-changes.outputs.backend_changed == 'true'
        run: dotnet publish Backend/Reglamentator.WebAPI/Reglamentator.WebAPI.csproj -c Release -o ./backend
      
      - name: Upload bot artifact
        if: needs.check-changes.outputs.bot_changes == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: bot
          path: ./bot

      - name: Upload backend artifact
        if: needs.check-changes.outputs.backend_changed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: backend
          path: ./backend

  publish-bot:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Download bot artifact
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: bot
          path: ./bot
          
      - name: Check if bot artifact exists
        id: check
        run: echo "found=$([[ -d ./bot ]] && echo true || echo false)" >> $GITHUB_OUTPUT

      - name: Stop if no bot artifact
        if: steps.check.outputs.found == 'false'
        run: echo "No bot artifact, skipping deploy."

      - name: Copy to remote server
        if: steps.check.outputs.found == 'true'
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.BOT_HOST }}
          username: ${{ secrets.BOT_SSH_USER }}
          key: ${{ secrets.BOT_SSH_KEY }}
          source: "./bot"
          target: "/app"

      - name: Restart Bot service
        if: steps.check.outputs.found == 'true'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.BOT_HOST }}
          username: ${{ secrets.BOT_SSH_USER }}
          key: ${{ secrets.BOT_SSH_KEY }}
          script: |
            export TelegramBot__Token='${{ secrets.TelegramBot__Token }}'
            export Grpc__BackendUrl='${{ secrets.Grpc__BackendUrl }'
            
            if ! dotnet --list-runtimes | grep 'Microsoft.AspNetCore.App 8.0' > /dev/null; then
              echo "Installing ASP.NET Core Runtime..."
              wget https://dot.net/v1/dotnet-install.sh -O dotnet-install.sh
              chmod +x dotnet-install.sh
              ./dotnet-install.sh --runtime aspnetcore --channel 8.0 --install-dir $HOME/.dotnet
              echo 'export DOTNET_ROOT=$HOME/.dotnet' >> ~/.bashrc
              echo 'export PATH=$PATH:$HOME/.dotnet:$HOME/.dotnet/tools' >> ~/.bashrc
              export DOTNET_ROOT=$HOME/.dotnet
              export PATH=$PATH:$HOME/.dotnet:$HOME/.dotnet/tools
            else
              echo "ASP.NET Core Runtime 8.0 is already installed"
            fi
            
            if [ -f /app/bot/pid.txt ]; then
              kill -9 $(cat /app/bot/pid.txt) || true
              rm /app/pid.txt
            fi
            
            cd /app/bot
            nohup $HOME/.dotnet/dotnet ./Reglamentator.Bot.dll > log.txt 2>&1 &
            echo $! > pid.txt
  
  publish-backend:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Download backend artifact
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: backend
          path: ./backend
    
      - name: Check if backend artifact exists
        id: check
        run: echo "found=$([[ -d ./backend ]] && echo true || echo false)" >> $GITHUB_OUTPUT

      - name: Stop if no backend artifact
        if: steps.check.outputs.found == 'false'
        run: echo "No backend artifact, skipping deploy."

      - name: Copy to remote server
        if: steps.check.outputs.found == 'true'
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.BACKEND_HOST }}
          username: ${{ secrets.BACKEND_SSH_USER }}
          key: ${{ secrets.BACKEND_SSH_KEY }}
          source: "./backend"
          target: "/app"

      - name: Restart Backend service without Docker
        if: steps.check.outputs.found == 'true'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.BACKEND_HOST }}
          username: ${{ secrets.BACKEND_SSH_USER }}
          key: ${{ secrets.BACKEND_SSH_KEY }}
          script: |
            export Database__ConnectionString='${{ secrets.Database__ConnectionString }}'
            export Database__HangfireConnectionString='${{ secrets.Database__HangfireConnectionString }}'
            export ASPNETCORE_ENVIRONMENT='Production'
            
            if ! dotnet --list-runtimes | grep 'Microsoft.AspNetCore.App 8.0' > /dev/null; then
              echo "Installing ASP.NET Core Runtime..."
              wget https://dot.net/v1/dotnet-install.sh -O dotnet-install.sh
              chmod +x dotnet-install.sh
              ./dotnet-install.sh --runtime aspnetcore --channel 8.0 --install-dir $HOME/.dotnet
              echo 'export DOTNET_ROOT=$HOME/.dotnet' >> ~/.bashrc
              echo 'export PATH=$PATH:$HOME/.dotnet:$HOME/.dotnet/tools' >> ~/.bashrc
              export DOTNET_ROOT=$HOME/.dotnet
              export PATH=$PATH:$HOME/.dotnet:$HOME/.dotnet/tools
            else
              echo "ASP.NET Core Runtime 8.0 is already installed"
            fi
            
            if [ -f /app/pid.txt ]; then
              kill -9 $(cat /app/pid.txt) || true
              rm /app/backend/pid.txt
            fi
            
            cd /app/backend
            nohup $HOME/.dotnet/dotnet ./Reglamentator.Backend.dll > log.txt 2>&1 &
            echo $! > pid.txt

