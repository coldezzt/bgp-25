name: ci-cd-pipeline

on:
  push:
    branches: [master]
  pull_request:

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      backend_changed: ${{ steps.filter.outputs.backend }}
      bot_changes: ${{ steps.filter.outputs.bot }}
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Detect changes
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            backend:
              - 'Backend/**'
              - 'Shared/**'
            bot:
              - 'Bot/**'
              - 'Shared/**'
  
  build-and-test-bot:
    runs-on: ubuntu-latest
    needs: check-changes
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
      
      - name: Restore
        run: dotnet restore Reglamentator.sln
      
      - name: Build
        run: dotnet build Reglamentator.sln --configuration Release --no-restore
      
      - name: Test
        run: dotnet test Tests/Reglamentator.Test.Bot/Reglamentator.Test.Bot.csproj --verbosity normal
      
      - name: Publish
        if: needs.check-changes.outputs.bot_changes == 'true'
        run: dotnet publish Bot/Reglamentator.Bot/Reglamentator.Bot.csproj -c Release -o ./bot
      
      - name: Upload bot artifact
        if: needs.check-changes.outputs.bot_changes == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: bot
          path: ./bot
          
  build-and-test-backend:
    runs-on: ubuntu-latest
    needs: check-changes
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'
          
      - name: Restore
        run: dotnet restore Reglamentator.sln

      - name: Build
        run: dotnet build Reglamentator.sln --configuration Release --no-restore
        
      - name: Test
        run: dotnet test Tests/Reglamentator.Test.Backend/Reglamentator.Test.Backend.csproj --verbosity normal
        
      - name: Publish
        if: needs.check-changes.outputs.backend_changed == 'true'
        run: dotnet publish Backend/Reglamentator.WebAPI/Reglamentator.WebAPI.csproj -c Release -o ./backend

      - name: Upload backend artifact
        if: needs.check-changes.outputs.backend_changed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: backend
          path: ./backend
        
  publish-bot:
    runs-on: ubuntu-latest
    needs: ["build-and-test-bot", "build-and-test-backend"]
    steps:
      - name: Download bot artifact
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: bot
          path: ./bot
          
      - name: Check if bot artifact exists
        id: check
        run: echo "found=$([[ -d ./bot ]] && echo true || echo false)" >> $GITHUB_OUTPUT

      - name: Stop if no bot artifact
        if: steps.check.outputs.found == 'false'
        run: echo "No bot artifact, skipping deploy."

      - name: Copy to remote server
        if: steps.check.outputs.found == 'true'
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.BOT_HOST }}
          username: ${{ secrets.BOT_SSH_USER }}
          key: ${{ secrets.BOT_SSH_KEY }}
          source: "./bot"
          target: "/app"

      - name: Restart Bot service
        if: steps.check.outputs.found == 'true'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.BOT_HOST }}
          username: ${{ secrets.BOT_SSH_USER }}
          key: ${{ secrets.BOT_SSH_KEY }}
          script: |
            docker rm -f reglamentator-bot || true

            docker run -d \
              --name reglamentator-bot \
              -e TelegramBot__Token="${{ secrets.TELEGRAMBOT__TOKEN }}" \
              -e Grpc__BackendUrl="${{ secrets.GRPC_BACKENDURL }}" \
              -v /app/bot:/app \
              -w /app \
              mcr.microsoft.com/dotnet/aspnet:8.0 \
              dotnet Reglamentator.Bot.dll
  
  publish-backend:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Download backend artifact
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: backend
          path: ./backend
    
      - name: Check if backend artifact exists
        id: check
        run: echo "found=$([[ -d ./backend ]] && echo true || echo false)" >> $GITHUB_OUTPUT

      - name: Stop if no backend artifact
        if: steps.check.outputs.found == 'false'
        run: echo "No backend artifact, skipping deploy."

      - name: Copy to remote server
        if: steps.check.outputs.found == 'true'
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.BACKEND_HOST }}
          username: ${{ secrets.BACKEND_SSH_USER }}
          key: ${{ secrets.BACKEND_SSH_KEY }}
          source: "./backend"
          target: "/app"

      - name: Restart Backend service
        if: steps.check.outputs.found == 'true'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.BACKEND_HOST }}
          username: ${{ secrets.BACKEND_SSH_USER }}
          key: ${{ secrets.BACKEND_SSH_KEY }}
          script: |
            docker rm -f reglamentator-backend || true
            
            docker run -d \
              --network=host \
              --name reglamentator-backend \
              -e Database__ConnectionString="${{ secrets.DATABASE__CONNECTIONSTRING }}" \
              -e Database__HangfireConnectionString="${{ secrets.DATABASE__HANGFIRECONNECTIONSTRING }}" \
              -e ASPNETCORE_ENVIRONMENT="Production" \
              -v /app/backend:/app \
              -w /app \
              mcr.microsoft.com/dotnet/aspnet:8.0 \
              dotnet Reglamentator.WebAPI.dll

