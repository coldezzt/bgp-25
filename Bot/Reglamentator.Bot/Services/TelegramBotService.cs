using Grpc.Net.Client.Balancer;
using Telegram.Bot;
using Telegram.Bot.Polling;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;

namespace Reglamentator.Bot.Services;

/// <summary>
/// –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å Telegram-–±–æ—Ç–∞, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥, –¥–∏–∞–ª–æ–≥–æ–≤ –∏ —Ä–∞–±–æ—Ç—É —Å gRPC backend.
/// </summary>
public class TelegramBotService
{
    private static readonly string InfoMessage = File.ReadAllText("Resources/infoMessage.md");
    private readonly ITelegramBotClient _botClient;
    private readonly Operation.OperationClient _operationClient;
    private readonly Reminder.ReminderClient _reminderClient;
    private readonly User.UserClient _userClient;
    private readonly DialogService _dialogService;

    /// <summary>
    /// –°–æ–∑–¥–∞—ë—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä TelegramBotService.
    /// </summary>
    /// <param name="botClient">–ö–ª–∏–µ–Ω—Ç Telegram-–±–æ—Ç–∞</param>
    /// <param name="operationClient">gRPC –∫–ª–∏–µ–Ω—Ç –æ–ø–µ—Ä–∞—Ü–∏–π</param>
    /// <param name="reminderClient">gRPC –∫–ª–∏–µ–Ω—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</param>
    /// <param name="userClient">gRPC –∫–ª–∏–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</param>
    public TelegramBotService(ITelegramBotClient botClient, Operation.OperationClient operationClient,
        Reminder.ReminderClient reminderClient, User.UserClient userClient)
    {
        _botClient = botClient;
        _operationClient = operationClient;
        _reminderClient = reminderClient;
        _userClient = userClient;
        _dialogService = new DialogService(_botClient, _operationClient, reminderClient);
    }

    /// <summary>
    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª Telegram-–±–æ—Ç–∞.
    /// </summary>
    /// <param name="cancellationToken">–¢–æ–∫–µ–Ω –æ—Ç–º–µ–Ω—ã</param>
    public async Task StartAsync(CancellationToken cancellationToken)
    {
        var receiverOptions = new ReceiverOptions();
        _botClient.StartReceiving(
            HandleUpdateAsync,
            HandleErrorAsync,
            receiverOptions,
            cancellationToken
        );
        var me = await _botClient.GetMe();
        Console.WriteLine($"Start listening for @{me.Username}");
    }

    private async Task HandleUpdateAsync(ITelegramBotClient bot, Update update, CancellationToken ct)
    {
        if (update.Type == UpdateType.Message && update.Message?.Text != null)
        {
            await HandleMessage(update.Message, ct);
        }
    }

    private async Task HandleMessage(Message message, CancellationToken ct)
    {
        var chatId = message.Chat.Id;
        var text = message.Text?.Trim() ?? "";

        if (await TryHandleCancelCommand(chatId, text, ct)) return;
        if (await TryHandleActiveDialog(chatId, message, ct)) return;
        if (await TryHandleSlashCommand(chatId, text, ct)) return;
        if (await TryHandleMainMenuButton(chatId, text, ct)) return;

        await SendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start", null, ct);
    }
    
    private async Task<bool> TryHandleCancelCommand(long chatId, string text, CancellationToken ct)
    {
        if (!text.Equals("/cancel", StringComparison.OrdinalIgnoreCase))
            return false;
        
        _dialogService.CancelDialog(chatId);
        await SendMessage(chatId, "–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω—ë–Ω.", MainKeyboard, ct);
        return true;
    }
    
    private async Task<bool> TryHandleActiveDialog(long chatId, Message message, CancellationToken ct)
    {
        if (!_dialogService.HasActiveDialog(chatId))
            return false;

        if (await _dialogService.HandleDialogMessage(message, ct))
            return true;

        await SendMessage(chatId, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.", null, ct);
        return true;
    }
    
    private async Task<bool> TryHandleSlashCommand(long chatId, string text, CancellationToken ct)
    {
        if (!text.StartsWith("/"))
            return false;

        var command = text.Split(' ')[0];
        switch (command)
        {
            case "/start":
                await HandleStartCommand(chatId, ct);
                return true;
            case "/list":
                await HandleListCommand(chatId, ct);
                return true;
            case "/add":
                await _dialogService.StartAddDialog(chatId, ct);
                return true;
            case "/delete":
                await HandleDeleteCommand(chatId, text, ct);
                return true;
            case "/today":
                await HandleFilteredListCommand(chatId, "today", ct);
                return true;
            case "/week":
                await HandleFilteredListCommand(chatId, "week", ct);
                return true;
            case "/month":
                await HandleFilteredListCommand(chatId, "month", ct);
                return true;
            case "/edit":
                await _dialogService.StartEditDialog(chatId, ct);
                return true;
            case "/history":
                await HandleHistoryCommand(chatId, ct);
                return true;
            default:
                return false;
        }
    }
    private async Task<bool> TryHandleMainMenuButton(long chatId, string text,CancellationToken ct)
    {
        switch (text)
        {
            case "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á":
                await HandleListCommand(chatId, ct);
                return true;
            case "‚ûï –î–æ–±–∞–≤–∏—Ç—å":
                await _dialogService.StartAddDialog(chatId, ct);
                return true;
            case "üìÖ –°–µ–≥–æ–¥–Ω—è":
                await HandleFilteredListCommand(chatId, "today", ct);
                return true;
            case "üóìÔ∏è –ù–µ–¥–µ–ª—è":
                await HandleFilteredListCommand(chatId, "week", ct);
                return true;
            case "üìÜ –ú–µ—Å—è—Ü":
                await HandleFilteredListCommand(chatId, "month", ct);
                return true;
            case "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å":
                await _dialogService.StartEditDialog(chatId, ct);
                return true;
            case "‚ùå –£–¥–∞–ª–∏—Ç—å":
                await HandleDeleteCommand(chatId, text, ct);
                return true;
            case "‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è":
                await SendInfoMessage(chatId, ct);
                return true;
            default:
                return false;
        }
    }
    
    private async Task HandleStartCommand(long chatId, CancellationToken ct)
    {
        var result = await _userClient.CreateUserAsync(new CreateUserRequest{TelegramId = chatId});
        if (result.Status.IsSuccess)
        {
            await SendMessage(chatId, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", MainKeyboard, ct);
            return;
        }

        await _botClient.SendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", cancellationToken: ct);
    }

    private async Task HandleHistoryCommand(long chatId, CancellationToken ct)
    {
        var result = await _operationClient.GetOperationHistoryAsync(new OperationHistoryRequest { TelegramId = chatId });
        if (!result.Status.IsSuccess)
        {
            await SendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π", ct: ct);
            return;
        }
        var history = result.History;
        if (history.Count == 0)
        {
            await SendMessage(chatId, "–ù–µ—Ç –∑–∞–¥–∞—á.", null, ct);
            return;
        }
        var operation = $"{history[0].Operation.Theme} - {history[0].Operation.StartDate} \n";
        var list = history[0].Operation.Id + string.Join("\n",
            history.Select(op => $"‚Ä¢ [{op.Id}] {op.Result} : {op.ScheduledAt} - {op.ExecutedAt}"));
        await SendMessage(chatId, "–í–∞—â–∞ –∏—Å—Ç–æ—Ä–∏—è –∑–∞–¥–∞—á", operation + list, ct);
        
    }
    private async Task HandleDeleteCommand(long chatId, string text, CancellationToken ct)
    {
        var parts = text.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length < 2 || !int.TryParse(parts[1], out int id))
        {
            await SendMessage(chatId, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete <ID>", null, ct);
            return;
        }

        try
        {
            var request = new DeleteOperationRequest
            {
                TelegramId = chatId,
                OperationId = id
            };
            await _operationClient.DeleteOperationAsync(request);
            await SendMessage(chatId, $"‚úÖ –ó–∞–¥–∞—á–∞ {id} —É–¥–∞–ª–µ–Ω–∞.", null, ct);
        }
        catch
        {
            await SendMessage(chatId, $"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É {id}.", null, ct);
        }
    }   
    
    private async Task HandleListCommand(long chatId, CancellationToken ct)
    {
        var request = new PlanedOperationsRequest { TelegramId = chatId, Range = TimeRange.Month };
        var response = await _operationClient.GetPlanedOperationsAsync(request);
        
        if (response.Instances.Count == 0)
        {
            await SendMessage(chatId, "–ù–µ—Ç –∑–∞–¥–∞—á.", null, ct);
            return;
        }

        var list = string.Join("\n", response.Instances.Select(op =>
        {
            var dto = op.Operation;
            var dueDate = dto.StartDate?.ToDateTime().ToString("g") ?? "–Ω–µ—Ç –¥–∞—Ç—ã";
            return $"‚Ä¢ [{dto.Id}] {dto.Theme} ‚Äî {dueDate}";
        }));

        await SendMessage(chatId, "–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n" + list, null, ct);
    }

    private async Task HandleFilteredListCommand(long chatId, string filter, CancellationToken ct)
    {
        var request = new PlanedOperationsRequest
        {
            TelegramId = chatId,
            Range = filter switch
            {
                "today" => TimeRange.Day,
                "week" => TimeRange.Week,
                "month" => TimeRange.Month,
                _ => TimeRange.Month
            }
        };

        var response = await _operationClient.GetPlanedOperationsAsync(request);

        if (response.Instances.Count == 0)
        {
            string msg = filter switch
            {
                "today" => "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á –Ω–µ—Ç.",
                "week" => "–ù–∞ –Ω–µ–¥–µ–ª—é –∑–∞–¥–∞—á –Ω–µ—Ç.",
                "month" => "–ù–∞ –º–µ—Å—è—Ü –∑–∞–¥–∞—á –Ω–µ—Ç.",
                _ => "–ù–µ—Ç –∑–∞–¥–∞—á."
            };
            await SendMessage(chatId, msg, null, ct);
            return;
        }

        var list = string.Join("\n", response.Instances.Select(op =>
        {
            var dto = op.Operation;
            var dueDate = dto.StartDate?.ToDateTime().ToString(filter == "today" ? "t" : "g") ?? "–Ω–µ—Ç –¥–∞—Ç—ã";
            return $"‚Ä¢ [{dto.Id}] {dto.Theme} ‚Äî {dueDate}";
        }));

        string header = filter switch
        {
            "today" => "–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n",
            "week" => "–ó–∞–¥–∞—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é:\n",
            "month" => "–ó–∞–¥–∞—á–∏ –Ω–∞ –º–µ—Å—è—Ü:\n",
            _ => "–ó–∞–¥–∞—á–∏:\n"
        };

        await SendMessage(chatId, header + list, null, ct);
    }

    private async Task SendMessage(long chatId, string text, ReplyKeyboardMarkup? markup = null, CancellationToken ct = default)
    {
        await _botClient.SendMessage(chatId, text, replyMarkup: markup, cancellationToken: ct);
    }

    private async Task SendInfoMessage(long chatId, CancellationToken ct)
    {
        await SendMessage(chatId, InfoMessage, MainKeyboard, ct);
    }

    private Task HandleErrorAsync(ITelegramBotClient bot, Exception exception, HandleErrorSource source, CancellationToken ct)
    {
        Console.WriteLine(exception.ToString());
        return Task.CompletedTask;
    }

    private static readonly ReplyKeyboardMarkup MainKeyboard = new(new[]
    {
        new KeyboardButton[] { "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á", "‚ûï –î–æ–±–∞–≤–∏—Ç—å" },
        new KeyboardButton[] { "üìÖ –°–µ–≥–æ–¥–Ω—è", "üóìÔ∏è –ù–µ–¥–µ–ª—è", "üìÜ –ú–µ—Å—è—Ü" },
        new KeyboardButton[] { "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", "‚ùå –£–¥–∞–ª–∏—Ç—å", "‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"  },
    })
    {
        ResizeKeyboard = true,
        OneTimeKeyboard = false
    };
}