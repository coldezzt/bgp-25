using Telegram.Bot;
using Telegram.Bot.Types;
using Telegram.Bot.Polling;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;
using Reglamentator.Bot;
using Grpc.Net.Client;
using Reglamentator.Bot.Services;

/// <summary>
/// –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å Telegram-–±–æ—Ç–∞, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥, –¥–∏–∞–ª–æ–≥–æ–≤ –∏ —Ä–∞–±–æ—Ç—É —Å gRPC backend.
/// </summary>
public class TelegramBotService
{
    private readonly ITelegramBotClient _botClient;
    private readonly Operation.OperationClient _grpcClient;
    private readonly Dictionary<long, string> _userStates = new();
    private readonly DialogService _dialogService;

    /// <summary>
    /// –°–æ–∑–¥–∞—ë—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä TelegramBotService.
    /// </summary>
    /// <param name="botClient">–ö–ª–∏–µ–Ω—Ç Telegram-–±–æ—Ç–∞</param>
    /// <param name="grpcClient">gRPC –∫–ª–∏–µ–Ω—Ç</param>
    public TelegramBotService(ITelegramBotClient botClient, Operation.OperationClient grpcClient)
    {
        _botClient = botClient;
        _grpcClient = grpcClient;
        _dialogService = new DialogService(_botClient, _grpcClient);
    }

    /// <summary>
    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª Telegram-–±–æ—Ç–∞.
    /// </summary>
    /// <param name="cancellationToken">–¢–æ–∫–µ–Ω –æ—Ç–º–µ–Ω—ã</param>
    public async Task StartAsync(CancellationToken cancellationToken)
    {
        var receiverOptions = new ReceiverOptions { AllowedUpdates = { } };
        _botClient.StartReceiving(
            HandleUpdateAsync,
            HandleErrorAsync,
            receiverOptions,
            cancellationToken
        );
        var me = await _botClient.GetMe();
        Console.WriteLine($"Start listening for @{me.Username}");
    }

    private async Task HandleUpdateAsync(ITelegramBotClient bot, Update update, CancellationToken ct)
    {
        if (update.Type == UpdateType.Message && update.Message?.Text != null)
        {
            await HandleMessage(update.Message, ct);
        }
    }

    private async Task HandleMessage(Message message, CancellationToken ct)
    {
        var chatId = message.Chat.Id;
        var text = message.Text ?? "";

        if (text.StartsWith("/") || IsMainMenuButton(text))
            _dialogService.CancelDialog(chatId);

        if (text.Equals("/cancel", StringComparison.OrdinalIgnoreCase))
        {
            _dialogService.CancelDialog(chatId);
            await SendMessage(chatId, "–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω—ë–Ω.", MainKeyboard, ct);
            return;
        }

        if (_dialogService.HasActiveDialog(chatId))
        {
            if (await _dialogService.HandleDialogMessage(message, ct))
                return;
        }

        if (text.StartsWith("/"))
        {
            var command = text.Split(' ')[0];
            switch (command)
            {
                case "/start":
                    await HandleStartCommand(chatId, ct);
                    return;
                case "/list":
                    await HandleListCommand(chatId, ct);
                    return;
                case "/add":
                    await _dialogService.StartAddDialog(chatId, ct);
                    return;
                case "/delete":
                    await HandleDeleteCommand(chatId, text, ct);
                    return;
                case "/today":
                    await HandleFilteredListCommand(chatId, "today", ct);
                    return;
                case "/week":
                    await HandleFilteredListCommand(chatId, "week", ct);
                    return;
                case "/month":
                    await HandleFilteredListCommand(chatId, "month", ct);
                    return;
                case "/edit":
                    await HandleEditCommand(message, text, ct);
                    return;
            }
        }
        else
        {
            switch (text)
            {
                case "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á":
                    await HandleListCommand(chatId, ct);
                    return;
                case "‚ûï –î–æ–±–∞–≤–∏—Ç—å":
                    await _dialogService.StartAddDialog(chatId, ct);
                    return;
                case "üìÖ –°–µ–≥–æ–¥–Ω—è":
                    await HandleFilteredListCommand(chatId, "today", ct);
                    return;
                case "üóìÔ∏è –ù–µ–¥–µ–ª—è":
                    await HandleFilteredListCommand(chatId, "week", ct);
                    return;
                case "üìÜ –ú–µ—Å—è—Ü":
                    await HandleFilteredListCommand(chatId, "month", ct);
                    return;
                case "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å":
                    await SendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ: /edit <ID>", MainKeyboard, ct);
                    return;
                case "‚ùå –£–¥–∞–ª–∏—Ç—å":
                    await SendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ: /delete <ID>", MainKeyboard, ct);
                    return;
                case "‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è":
                    await SendInfoMessage(chatId, ct);
                    return;
            }
        }

        await SendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start", null, ct);
    }

    private bool IsMainMenuButton(string text)
    {
        return text == "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á" || text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å" || text == "üìÖ –°–µ–≥–æ–¥–Ω—è" ||
               text == "üóìÔ∏è –ù–µ–¥–µ–ª—è" || text == "üìÜ –ú–µ—Å—è—Ü" || text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å" || text == "‚ùå –£–¥–∞–ª–∏—Ç—å";
    }

    private async Task HandleStartCommand(long chatId, CancellationToken ct)
    {
        _userStates.Remove(chatId);
        await SendMessage(chatId, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", MainKeyboard, ct);
    }

    private async Task HandleDeleteCommand(long chatId, string text, CancellationToken ct)
    {
        var parts = text.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length < 2 || !int.TryParse(parts[1], out int id))
        {
            await SendMessage(chatId, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delete <ID>", null, ct);
            return;
        }

        try
        {
            var request = new DeleteOperationRequest
            {
                TelegramId = chatId,
                OperationId = id
            };
            await _grpcClient.DeleteOperationAsync(request);
            await SendMessage(chatId, $"‚úÖ –ó–∞–¥–∞—á–∞ {id} —É–¥–∞–ª–µ–Ω–∞.", null, ct);
        }
        catch
        {
            await SendMessage(chatId, $"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É {id}.", null, ct);
        }
    }

    private async Task HandleEditCommand(Message message, string text, CancellationToken ct)
    {
        var chatId = message.Chat.Id;
        var parts = text.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length < 2 || !int.TryParse(parts[1], out int id))
        {
            await SendMessage(chatId, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /edit <ID>", null, ct);
            return;
        }

        try
        {
            var request = new UpdateOperationRequest
            {
                Operation = new UpdateOperationDto
                {
                    Id = id,
                    Theme = "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞",
                    Description = "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
                    StartDate = Google.Protobuf.WellKnownTypes.Timestamp.FromDateTime(
                        DateTime.SpecifyKind(DateTime.Now, DateTimeKind.Utc))
                }
            };
            await _grpcClient.UpdateOperationAsync(request);
            await SendMessage(chatId, $"‚úÖ –ó–∞–¥–∞—á–∞ {id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", null, ct);
        }
        catch
        {
            await SendMessage(chatId, $"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ {id}.", null, ct);
        }
    }

    private async Task HandleListCommand(long chatId, CancellationToken ct)
    {
        var request = new PlanedOperationsRequest { TelegramId = chatId, Range = TimeRange.Month };
        var response = await _grpcClient.GetPlanedOperationsAsync(request);

        if (response.Instances.Count == 0)
        {
            await SendMessage(chatId, "–ù–µ—Ç –∑–∞–¥–∞—á.", null, ct);
            return;
        }

        var list = string.Join("\n", response.Instances.Select(op =>
        {
            var dto = op.Operation;
            var dueDate = dto.StartDate?.ToDateTime().ToString("g") ?? "–Ω–µ—Ç –¥–∞—Ç—ã";
            return $"‚Ä¢ [{dto.Id}] {dto.Theme} ‚Äî {dueDate}";
        }));

        await SendMessage(chatId, "–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n" + list, null, ct);
    }

    private async Task HandleFilteredListCommand(long chatId, string filter, CancellationToken ct)
    {
        var request = new PlanedOperationsRequest
        {
            TelegramId = chatId,
            Range = filter switch
            {
                "today" => TimeRange.Day,
                "week" => TimeRange.Week,
                "month" => TimeRange.Month,
                _ => TimeRange.Month
            }
        };

        var response = await _grpcClient.GetPlanedOperationsAsync(request);

        if (response.Instances.Count == 0)
        {
            string msg = filter switch
            {
                "today" => "–ù–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–¥–∞—á –Ω–µ—Ç.",
                "week" => "–ù–∞ –Ω–µ–¥–µ–ª—é –∑–∞–¥–∞—á –Ω–µ—Ç.",
                "month" => "–ù–∞ –º–µ—Å—è—Ü –∑–∞–¥–∞—á –Ω–µ—Ç.",
                _ => "–ù–µ—Ç –∑–∞–¥–∞—á."
            };
            await SendMessage(chatId, msg, null, ct);
            return;
        }

        var list = string.Join("\n", response.Instances.Select(op =>
        {
            var dto = op.Operation;
            var dueDate = dto.StartDate?.ToDateTime().ToString(filter == "today" ? "t" : "g") ?? "–Ω–µ—Ç –¥–∞—Ç—ã";
            return $"‚Ä¢ [{dto.Id}] {dto.Theme} ‚Äî {dueDate}";
        }));

        string header = filter switch
        {
            "today" => "–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n",
            "week" => "–ó–∞–¥–∞—á–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é:\n",
            "month" => "–ó–∞–¥–∞—á–∏ –Ω–∞ –º–µ—Å—è—Ü:\n",
            _ => "–ó–∞–¥–∞—á–∏:\n"
        };

        await SendMessage(chatId, header + list, null, ct);
    }

    private async Task SendMessage(long chatId, string text, ReplyKeyboardMarkup? markup = null, CancellationToken ct = default)
    {
        await _botClient.SendMessage(chatId, text, replyMarkup: markup, cancellationToken: ct);
    }

    private async Task SendInfoMessage(long chatId, CancellationToken ct)
    {
        string info = "‚ÑπÔ∏è <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:</b>\n\n" +
                      "‚Ä¢ <b>–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É</b>: –Ω–∞–∂–º–∏—Ç–µ \"‚ûï –î–æ–±–∞–≤–∏—Ç—å\" –∏ —Å–ª–µ–¥—É–π—Ç–µ –¥–∏–∞–ª–æ–≥—É.\n" +
                      "‚Ä¢ <b>–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á</b>: –Ω–∞–∂–º–∏—Ç–µ \"üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\".\n" +
                      "‚Ä¢ <b>–§–∏–ª—å—Ç—Ä—ã</b>: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ \"–°–µ–≥–æ–¥–Ω—è\", \"–ù–µ–¥–µ–ª—è\", \"–ú–µ—Å—è—Ü\".\n" +
                      "‚Ä¢ <b>–ò–∑–º–µ–Ω–∏—Ç—å/–£–¥–∞–ª–∏—Ç—å</b>: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ \"‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å\" –∏–ª–∏ \"‚ùå –£–¥–∞–ª–∏—Ç—å\" –∏ —Å–ª–µ–¥—É–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º.\n" +
                      "‚Ä¢ <b>–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞</b>: –≤–≤–µ–¥–∏—Ç–µ /cancel.\n\n" +
                      "–ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã: /start, /list, /add, /delete, /edit, /today, /week, /month.\n" +
                      "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.";
        await SendMessage(chatId, info, MainKeyboard, ct);
    }

    private Task HandleErrorAsync(ITelegramBotClient bot, Exception exception, HandleErrorSource source, CancellationToken ct)
    {
        Console.WriteLine(exception.ToString());
        return Task.CompletedTask;
    }

    private static readonly ReplyKeyboardMarkup MainKeyboard = new(new[]
    {
        new KeyboardButton[] { "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á", "‚ûï –î–æ–±–∞–≤–∏—Ç—å" },
        new KeyboardButton[] { "üìÖ –°–µ–≥–æ–¥–Ω—è", "üóìÔ∏è –ù–µ–¥–µ–ª—è", "üìÜ –ú–µ—Å—è—Ü" },
        new KeyboardButton[] { "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", "‚ùå –£–¥–∞–ª–∏—Ç—å", "‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"  },
    })
    {
        ResizeKeyboard = true,
        OneTimeKeyboard = false
    };
}
