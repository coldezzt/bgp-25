// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Reglamentator.Data;

#nullable disable

namespace Reglamentator.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Reglamentator.Domain.Entities.Operation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Cron")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("cron");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<long?>("NextOperationInstanceId")
                        .HasColumnType("bigint")
                        .HasColumnName("next_operation_instance_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<long>("TelegramUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("telegram_user_id");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("theme");

                    b.HasKey("Id")
                        .HasName("pk_operations");

                    b.HasIndex("NextOperationInstanceId")
                        .IsUnique()
                        .HasDatabaseName("ix_operations_next_operation_instance_id");

                    b.HasIndex("TelegramUserId")
                        .HasDatabaseName("ix_operations_telegram_user_id");

                    b.ToTable("operations", (string)null);
                });

            modelBuilder.Entity("Reglamentator.Domain.Entities.OperationInstance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ExecutedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("executed_at");

                    b.Property<long>("OperationId")
                        .HasColumnType("bigint")
                        .HasColumnName("operation_id");

                    b.Property<string>("Result")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("result");

                    b.Property<DateTime>("ScheduledAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("scheduled_at");

                    b.HasKey("Id")
                        .HasName("pk_operation_instances");

                    b.HasIndex("OperationId")
                        .HasDatabaseName("ix_operation_instances_operation_id");

                    b.ToTable("operation_instances", (string)null);
                });

            modelBuilder.Entity("Reglamentator.Domain.Entities.Reminder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("MessageTemplate")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("message_template");

                    b.Property<TimeSpan>("OffsetBeforeExecution")
                        .HasColumnType("interval")
                        .HasColumnName("offset_before_execution");

                    b.Property<long>("OperationId")
                        .HasColumnType("bigint")
                        .HasColumnName("operation_id");

                    b.HasKey("Id")
                        .HasName("pk_reminders");

                    b.HasIndex("OperationId")
                        .HasDatabaseName("ix_reminders_operation_id");

                    b.ToTable("reminders", (string)null);
                });

            modelBuilder.Entity("Reglamentator.Domain.Entities.TelegramUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("TelegramId")
                        .HasColumnType("bigint")
                        .HasColumnName("telegram_id");

                    b.HasKey("Id")
                        .HasName("pk_telegram_users");

                    b.HasAlternateKey("TelegramId")
                        .HasName("ak_telegram_users_telegram_id");

                    b.HasIndex("TelegramId")
                        .IsUnique()
                        .HasDatabaseName("ix_telegram_users_telegram_id");

                    b.ToTable("telegram_users", (string)null);
                });

            modelBuilder.Entity("Reglamentator.Domain.Entities.Operation", b =>
                {
                    b.HasOne("Reglamentator.Domain.Entities.OperationInstance", "NextOperationInstance")
                        .WithOne()
                        .HasForeignKey("Reglamentator.Domain.Entities.Operation", "NextOperationInstanceId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_operations_operation_instances_next_operation_instance_id");

                    b.HasOne("Reglamentator.Domain.Entities.TelegramUser", "TelegramUser")
                        .WithMany("Operations")
                        .HasForeignKey("TelegramUserId")
                        .HasPrincipalKey("TelegramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_operations_telegram_users_telegram_user_id");

                    b.Navigation("NextOperationInstance");

                    b.Navigation("TelegramUser");
                });

            modelBuilder.Entity("Reglamentator.Domain.Entities.OperationInstance", b =>
                {
                    b.HasOne("Reglamentator.Domain.Entities.Operation", "Operation")
                        .WithMany("History")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_operation_instances_operations_operation_id");

                    b.Navigation("Operation");
                });

            modelBuilder.Entity("Reglamentator.Domain.Entities.Reminder", b =>
                {
                    b.HasOne("Reglamentator.Domain.Entities.Operation", "Operation")
                        .WithMany("Reminders")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reminders_operations_operation_id");

                    b.Navigation("Operation");
                });

            modelBuilder.Entity("Reglamentator.Domain.Entities.Operation", b =>
                {
                    b.Navigation("History");

                    b.Navigation("Reminders");
                });

            modelBuilder.Entity("Reglamentator.Domain.Entities.TelegramUser", b =>
                {
                    b.Navigation("Operations");
                });
#pragma warning restore 612, 618
        }
    }
}
